var searchIndex = {};
searchIndex["pumpkin"] = {"doc":"A crate for generating large, cryptographically secure prime numbers.\n`Primes` are seeded from the operating system&#39;s main source of entropy,\nensuring proper randomness.","items":[[3,"Prime","pumpkin","A cryptographically secure prime number.",null,null],[12,"0","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"prime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"prime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"prime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"prime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"prime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"prime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"add","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"sub","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"sub","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"mul","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"mul","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"div","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"div","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"rem","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"rem","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"bitand","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"bitand","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"bitor","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"bitor","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"bitxor","","",0,{"inputs":[{"name":"prime"},{"name":"self"}],"output":{"name":"prime"}}],[11,"bitxor","","",0,{"inputs":[{"name":"prime"},{"name":"int"}],"output":{"name":"prime"}}],[11,"new","","Constructs a new `Prime` with a size of `bit_length` bits.",0,{"inputs":[{"name":"usize"}],"output":{"name":"prime"}}],[11,"from_rng","","Constructs a new `Prime` with the size of `bit_length` bits, sourced\nfrom an already-created `OsRng`. Not that you can **ONLY** use an\n`OsRng`, as it uses the operating system&#39;s secure source of entropy.",0,{"inputs":[{"name":"usize"},{"name":"osrng"}],"output":{"name":"prime"}}]],"paths":[[3,"Prime"]]};
searchIndex["ramp"] = {"doc":"","items":[[0,"ll","ramp","This module provides the low-level operations for working with arbitrary precision numbers.",null,null],[5,"shl","ramp::ll","Performs a bit-shift of the limbs in {xp, xs}, left by `cnt` bits storing the result in {rp,\nrs}. The top-most shifted bits are returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"limb"}}],[5,"shr","","Performs a bit-shift of the limbs in {xp, xs}, right by `cnt` bits storing the result in {rp,\nrs}. The bottom-most shifted bits are returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"limb"}}],[5,"and_n","","Performs a bitwise &quot;and&quot; (`&amp;`) of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"and_not_n","","Performs a bitwise and of the n least signficant limbs of `xp` and `yp`, with the limbs of `yp`\nbeing first inverted. The result is stored in `wp`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"nand_n","","Performs a bitwise &quot;nand&quot; of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"or_n","","Performs a bitwise &quot;or&quot; (`|`) of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"or_not_n","","Performs a bitwise &quot;or&quot; of the n least signficant limbs of `xp` and `yp`, with the limbs of `yp`\nbeing first inverted. The result is stored in `wp`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"nor_n","","Performs a bitwise &quot;nor&quot; of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"xor_n","","Performs a bitwise &quot;xor&quot; (`^`) of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"not","","Performs a bitwise inversion (&quot;not&quot;) of the n least signficant limbs of `xp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"scan_1","","Scans for the first 1 bit starting from the least-significant bit the the most, returning\nthe bit index.",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"u32"}}],[5,"scan_0","","Scans for the first 0 bit starting from the least-significant bit the the most, returning\nthe bit index.",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"u32"}}],[5,"twos_complement","","Computes the two&#39;s complement of the `xs` least significant words\nof `xp`. The result is stored the result in `wp`, and a carry is\nreturned, if there is one.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"add_n","","Adds the `n` least signficant limbs of `xp` and `yp`, storing the result in {wp, n}.\nIf there was a carry, it is returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"sub_n","","Subtracts the `n` least signficant limbs of `yp` from `xp`, storing the result in {wp, n}.\nIf there was a borrow from a higher-limb (i.e., the result would be negative), it is returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"add","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"sub","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"add_1","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"sub_1","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"incr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limb"}],"output":null}],[5,"decr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limb"}],"output":null}],[5,"addmul_1","","Multiplies the `n` least-signficiant digits of `xp` by `vl` and adds them to the `n`\nleast-significant digits of `wp`. Returns the highest limb of the result.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"submul_1","","Multiplies the `n` least-signficiant digits of `xp` by `vl` and subtracts them from the `n`\nleast-significant digits of `wp`. Returns the highest limb of the result, adjust for borrow.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"mul_1","","Multiplies the `n` least-significant limbs of `xp` by `vl` storing the `n` least-significant\nlimbs of the product in `{wp, n}`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"mul","","Multiplies `{xp, xs}` by `{yp, ys}`, storing the result to `{wp, xs + ys}`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"sqr","","Squares the number in `{xp, xs}` storing the result in `{wp, xs*2}`.\nThis is slightly more efficient than regular multiplication with both\ninputs the same.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"divrem_1","","Divides the `xs` least-significant limbs at `xp` by `d`, storing the result in {qp, qxn + xs}.",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"divrem_2","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"}],"output":{"name":"limb"}}],[5,"divrem","","Divides {np, ns} by {dp, ds}. If ns &lt;= ds, the quotient is stored in {qp, 1}, otherwise\nthe quotient is stored to {qp, (ns - ds) + 1}. The remainder is always stored to {rp, ds}.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"gcd","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"},{"name":"i32"},{"name":"limbsmut"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"overlap","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"same_or_separate","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"same_or_incr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"same_or_decr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"copy_incr","","Copies the `n` limbs from `src` to `dst` in an incremental fashion.",null,{"inputs":[{"name":"limbs"},{"name":"limbsmut"},{"name":"i32"}],"output":null}],[5,"copy_decr","","Copies the `n` limbs from `src` to `dst` in a decremental fashion.",null,{"inputs":[{"name":"limbs"},{"name":"limbsmut"},{"name":"i32"}],"output":null}],[5,"copy_rest","","Copies the `n - start` limbs from `src + start` to `dst + start`",null,{"inputs":[{"name":"limbs"},{"name":"limbsmut"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"normalize","","Returns the size of the integer pointed to by `p` such that the most\nsignificant limb is non-zero.",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"divide_by_zero","","Called when a divide by zero occurs.",null,{"inputs":[],"output":null}],[5,"is_zero","","Checks that all `nn` limbs in `np` are zero",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"zero","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"}],"output":null}],[5,"cmp","","Compares the `n` least-significant limbs of `xp` and `yp`, returning whether\n{xp, n} is less than, equal to or greater than {yp, n}",null,{"inputs":[{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"ordering"}}],[0,"pow","","",null,null],[5,"pow","ramp::ll::pow","Takes `{ap, an}` to the power of `exp` and stores the result to `wp`. `wp` is\nassumed to have enough space to store the result (which can be calculated using\n`num_pow_limbs`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":null}],[5,"num_pow_limbs","","Calculates the number of limbs required to store the result of taking\n`{xp, xn}` to the power of `exp`",null,{"inputs":[{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[0,"base","ramp::ll","Base conversion utilities",null,null],[5,"num_base_digits","ramp::ll::base","",null,{"inputs":[{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"usize"}}],[5,"base_digits_to_len","","",null,{"inputs":[{"name":"usize"},{"name":"u32"}],"output":{"name":"usize"}}],[5,"to_base","","Converts `nn` limbs at `np` to the given base, storing the output in `out`. `out` is assumed to\nhave enough space for the entire digit. The output is stored from most-significant digit to least.",null,{"inputs":[{"name":"u32"},{"name":"limbs"},{"name":"i32"},{"name":"f"}],"output":null}],[5,"from_base","","Converts the base `base` bytestring {bp, bs}, storing the limbs in `out`. `out` is assumed to\nhave enough space to store the result.",null,null],[0,"limb","ramp::ll","",null,null],[3,"Limb","ramp::ll::limb","Helper newtype for operations.",null,null],[12,"0","","",0,null],[5,"add_2","","Performs the two-word addition (ah, al) + (bh, bl), ignoring any overflow.",null,null],[5,"sub_2","","Performs the two-word subtraction (ah, al) - (bh, bl), ignoring any borrow.",null,null],[5,"div","","Divides the two-limb numerator `(nh, nl)` by `d`, returning a single-limb\nquotient, Q, and remainder, R, as (Q, R).",null,null],[5,"div_preinv","","Divides `(nh, nl)` by `d` using the inverted limb `dinv`. Returns the quotient, Q, and\nremainder, R, as (Q, R);",null,null],[6,"BaseInt","","",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[18,"BITS","ramp::ll","",0,null],[18,"B","","",0,null],[11,"high_part","ramp::ll::limb","Returns the high half of the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"low_part","","Returns the low half of the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"add_overflow","","Performs `self + other`, returning the result and whether or not the addition overflowed",0,null],[11,"sub_overflow","","Performs `self - other`, returning the result and whether or not the subtraction overflowed",0,null],[11,"mul_lo","","Performs `self * other` returning the lower half of the product",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul_hi","","Performs `self * other` returning the higher half of the product",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul_hilo","","Performs `self * other` returning the two-limb result as (high, low).",0,null],[11,"invert","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"high_bit_set","","Returns whether or not the highest bit in the limb is set.",0,{"inputs":[{"name":"limb"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"baseint"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"baseint"}}],[11,"add","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"add","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"add","","",0,{"inputs":[{"name":"limb"},{"name":"bool"}],"output":{"name":"limb"}}],[11,"add","","",1,{"inputs":[{"name":"baseint"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"sub","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"sub","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"sub","","",0,{"inputs":[{"name":"limb"},{"name":"bool"}],"output":{"name":"limb"}}],[11,"sub","","",1,{"inputs":[{"name":"baseint"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"mul","","",1,{"inputs":[{"name":"baseint"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"div","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"div","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"rem","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"rem","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"neg","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"shl","","",0,{"inputs":[{"name":"limb"},{"name":"i"}],"output":{"name":"limb"}}],[11,"shr","","",0,{"inputs":[{"name":"limb"},{"name":"i"}],"output":{"name":"limb"}}],[11,"not","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"bitand","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"bitor","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"bitxor","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"eq","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"limb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"limb"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"limb_ptr","ramp::ll","",null,null],[3,"Limbs","ramp::ll::limb_ptr","A version of `*const Limb` that is bounds-checked when debug assertions are on",null,null],[3,"LimbsMut","","A version of `*mut Limb` that is bounds-checked when debug assertions are on",null,null],[11,"fmt","","",2,{"inputs":[{"name":"limbs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"limbs"}],"output":{"name":"limbs"}}],[11,"clone","","",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limbsmut"}}],[11,"new","","Create a new instance, pointing at `base` and valid\nfrom `base.offset(start)` to `base.offset(end)`.",2,null],[11,"offset","","Move `self` to point to the `x`th Limbs from the\ncurrent location.",2,{"inputs":[{"name":"limbs"},{"name":"isize"}],"output":{"name":"limbs"}}],[11,"eq","","",2,{"inputs":[{"name":"limbs"},{"name":"limbs"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"limbs"},{"name":"limbs"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"limbs"},{"name":"limbs"}],"output":{"name":"ordering"}}],[11,"deref","","",2,{"inputs":[{"name":"limbs"}],"output":{"name":"limb"}}],[11,"new","","Create a new instance, pointing at `base` and valid\nfrom `base.offset(start)` to `base.offset(end)`.",3,null],[11,"offset","","Move `self` to point to the `x`th Limbs from the\ncurrent location.",3,{"inputs":[{"name":"limbsmut"},{"name":"isize"}],"output":{"name":"limbsmut"}}],[11,"eq","","",3,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"}],"output":{"name":"ordering"}}],[11,"deref","","",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limb"}}],[11,"as_const","","View the `LimbsMut` as a `Limbs` (an explicit `*const\nLimb` -&gt; `*mut Limb` conversion)",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limbs"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limb"}}],[0,"int","ramp","",null,null],[3,"Int","ramp::int","An arbitrary-precision signed integer.",null,null],[3,"ParseIntError","","",null,null],[8,"RandomInt","","Trait for generating random `Int`.",null,null],[10,"gen_uint","","Generate a random unsigned `Int` of given bit size.",4,{"inputs":[{"name":"randomint"},{"name":"usize"}],"output":{"name":"int"}}],[10,"gen_int","","Generate a random `Int` of given bit size.",4,{"inputs":[{"name":"randomint"},{"name":"usize"}],"output":{"name":"int"}}],[10,"gen_uint_below","","Generate a random unsigned `Int` less than the given bound.\nFails when the bound is zero or negative.",4,{"inputs":[{"name":"randomint"},{"name":"int"}],"output":{"name":"int"}}],[10,"gen_int_range","","Generate a random `Int` within the given range.\nThe lower bound is inclusive; the upper bound is exclusive.\nFails when the upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randomint"},{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"int"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"int"}}],[11,"from_single_limb","","Creates a new Int from the given Limb.",5,{"inputs":[{"name":"limb"}],"output":{"name":"int"}}],[11,"sign","","Returns the sign of the Int as either -1, 0 or 1 for self being negative, zero\nor positive, respectively.",5,{"inputs":[{"name":"int"}],"output":{"name":"i32"}}],[11,"abs","","Consumes self and returns the absolute value",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"to_single_limb","","Returns the least-significant limb of self.",5,{"inputs":[{"name":"int"}],"output":{"name":"limb"}}],[11,"abs_cmp","","Compare the absolute value of self to the absolute value of other,\nreturning an Ordering with the result.",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"shrink_to_fit","","Try to shrink the allocated data for this Int.",5,{"inputs":[{"name":"int"}],"output":null}],[11,"to_str_radix","","Returns a string containing the value of self in base `base`. For bases greater than\nten, if `upper` is true, upper-case letters are used, otherwise lower-case ones are used.",5,{"inputs":[{"name":"int"},{"name":"u8"},{"name":"bool"}],"output":{"name":"string"}}],[11,"write_radix","","",5,{"inputs":[{"name":"int"},{"name":"w"},{"name":"u8"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates a new Int from the given string in base `base`.",5,{"inputs":[{"name":"str"},{"name":"u8"}],"output":{"name":"result"}}],[11,"divmod","","Divide self by other, returning the quotient, Q, and remainder, R as (Q, R).",5,null],[11,"pow","","Raises self to the power of exp",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"square","","Returns the square of `self`.",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"dsquare","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"sqrt_rem","","Compute the sqrt of this number, returning its floor, S,  and the\nremainder, R, as Some((S, R)), or None if this number is negative.",5,{"inputs":[{"name":"int"}],"output":{"name":"option"}}],[11,"negate","","Negates `self` in-place",5,{"inputs":[{"name":"int"}],"output":null}],[11,"is_even","","Returns whether or not this number is even.",5,{"inputs":[{"name":"int"}],"output":{"name":"bool"}}],[11,"trailing_zeros","","Returns the number of trailing zero bits in this number",5,{"inputs":[{"name":"int"}],"output":{"name":"u32"}}],[11,"count_ones","","Returns the number of ones (the population count) in this number",5,{"inputs":[{"name":"int"}],"output":{"name":"usize"}}],[11,"bit_length","","Returns the number of bits required to represent (the absolute\nvalue of) this number, that is, `floor(log2(abs(self))) + 1`.",5,{"inputs":[{"name":"int"}],"output":{"name":"u32"}}],[11,"bit","","Returns the value of the `bit`th bit in this number, as if it\nwere represented in two&#39;s complement.",5,{"inputs":[{"name":"int"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"set_bit","","Set the `bit`th bit of this number to `bit_val`, treating\nnegative numbers as if they&#39;re stored in two&#39;s complement.",5,{"inputs":[{"name":"int"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"clone","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"clone_from","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"default","","",5,{"inputs":[],"output":{"name":"int"}}],[11,"drop","","",5,{"inputs":[{"name":"int"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"eq","ramp::ll::limb","",0,{"inputs":[{"name":"limb"},{"name":"int"}],"output":{"name":"bool"}}],[11,"cmp","ramp::int","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"option"}}],[11,"partial_cmp","ramp::ll::limb","",0,{"inputs":[{"name":"limb"},{"name":"int"}],"output":{"name":"option"}}],[11,"hash","ramp::int","",5,{"inputs":[{"name":"int"},{"name":"h"}],"output":null}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"neg","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"shl_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"shl","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"shr_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"shr","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"add","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"add","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"div","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"div","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"bitand","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"bitor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"bitxor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"int"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",6,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"int"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"int"}}],[11,"step","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"steps_between","","",5,{"inputs":[{"name":"int"},{"name":"int"},{"name":"int"}],"output":{"name":"option"}}]],"paths":[[3,"Limb"],[6,"BaseInt"],[3,"Limbs"],[3,"LimbsMut"],[8,"RandomInt"],[3,"Int"],[3,"ParseIntError"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"stat","libc","",null,null],[12,"st_dev","","",0,null],[12,"st_ino","","",0,null],[12,"st_mode","","",0,null],[12,"st_nlink","","",0,null],[12,"st_uid","","",0,null],[12,"st_gid","","",0,null],[12,"st_rdev","","",0,null],[12,"st_size","","",0,null],[12,"st_atime","","",0,null],[12,"st_mtime","","",0,null],[12,"st_ctime","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"chmod","","",null,null],[5,"wchmod","","",null,null],[5,"mkdir","","",null,null],[5,"wrmdir","","",null,null],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"wstat","","",null,null],[5,"wutime","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"wopen","","",null,null],[5,"creat","","",null,null],[5,"access","","",null,null],[5,"chdir","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"execvpe","","",null,null],[5,"getcwd","","",null,null],[5,"getpid","","",null,null],[5,"isatty","","",null,null],[5,"lseek","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"commit","","",null,null],[5,"get_osfhandle","","",null,null],[5,"open_osfhandle","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",4,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",4,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",4,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",4,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",4,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",4,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",4,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",4,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",4,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"hash","core::num","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"neg","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",6,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",6,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",7,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",8,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",8,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",9,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",10,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",10,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",11,null],[11,"get","","Dereferences the content.",11,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",11,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",12,null],[11,"clone","","",12,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",13,null],[11,"eq","","",13,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",14,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",14,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",15,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",15,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",16,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",16,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",17,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",17,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",18,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",18,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",19,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",19,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",21,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",21,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",21,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",21,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",21,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",21,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",21,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",22,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",23,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",25,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",23,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",23,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",23,null],[11,"swap","","Stores a value into the bool, returning the old value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",23,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",24,null],[11,"load","","Loads a value from the pointer.",24,null],[11,"store","","Stores a value into the pointer.",24,null],[11,"swap","","Stores a value into the pointer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",24,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",24,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",26,{"inputs":[{"name":"atomici8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",26,{"inputs":[{"name":"atomici8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",27,{"inputs":[{"name":"atomicu8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",27,{"inputs":[{"name":"atomicu8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",28,{"inputs":[{"name":"atomici16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",28,{"inputs":[{"name":"atomici16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",29,{"inputs":[{"name":"atomicu16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",29,{"inputs":[{"name":"atomicu16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomici32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",30,{"inputs":[{"name":"atomici32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",31,{"inputs":[{"name":"atomicu32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",31,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",31,{"inputs":[{"name":"atomicu32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",31,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",31,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",32,{"inputs":[{"name":"atomici64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",32,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",32,{"inputs":[{"name":"atomici64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",32,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",32,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",33,{"inputs":[{"name":"atomicu64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",33,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",33,{"inputs":[{"name":"atomicu64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",33,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",33,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",34,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",34,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",34,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",34,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",35,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",35,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",35,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",35,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","","",23,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",36,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",36,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",36,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",36,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",36,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",36,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",36,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",38,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",38,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",38,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",38,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",38,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",38,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",38,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",38,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",38,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",39,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",39,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",39,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",40,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",40,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",41,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",41,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",42,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",42,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",43,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"count","","",43,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",43,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",43,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",44,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",44,null],[11,"next","","",44,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"fmt","","",45,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",45,null],[11,"next","","",45,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"fmt","core::iter::range","",46,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",16,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",15,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",18,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",46,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next","","",46,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next","","",46,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next","core::ops","",15,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",47,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",47,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",48,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",48,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",49,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",49,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",49,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",50,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",50,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",51,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",51,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",52,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",52,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"fmt","","",53,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",53,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",53,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",53,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",53,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",53,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",54,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",55,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",55,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",56,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",56,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",57,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",57,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",58,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"nth","","",58,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",59,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",59,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",59,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",60,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",60,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",61,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",61,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"fmt","","",62,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",62,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",63,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",63,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",63,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"clone","","",64,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",64,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",64,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",65,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",65,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",65,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",66,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",66,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",67,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",68,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",69,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",70,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",4,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",71,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",72,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",73,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",73,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",73,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",73,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",73,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",73,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",73,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",73,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",73,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",73,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",73,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",73,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",73,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",73,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",73,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",73,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",73,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",73,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",73,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",74,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",75,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",75,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",76,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",76,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",73,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",77,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",77,null],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"count","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",77,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",78,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",78,null],[11,"next","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"count","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",78,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",79,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",79,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",80,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",80,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",81,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",81,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next","","",82,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next","","",83,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next","","",84,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"fmt","","",85,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",85,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"count","","",85,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",85,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",85,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",86,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"count","","",86,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",86,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",86,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",87,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",87,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"count","","",87,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",88,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",89,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",89,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",90,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",90,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",91,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",91,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",92,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",92,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",92,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",92,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",92,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",92,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",93,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",93,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",94,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",94,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",94,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",95,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",95,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",96,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",96,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",96,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",97,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"count","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",97,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",98,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",98,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",99,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",98,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",100,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",101,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",101,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",100,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",103,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",104,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",104,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",105,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",105,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",104,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",106,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",106,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",107,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",107,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",106,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",107,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",108,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",108,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",109,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",109,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",110,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",111,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",111,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",111,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",111,null],[11,"finish","","",111,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",111,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",112,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",112,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",112,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",113,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",114,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",114,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",115,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",115,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",116,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",116,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",116,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",117,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",117,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",117,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",118,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",118,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",118,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",119,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",119,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",119,null],[11,"default","","",119,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",119,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",120,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",120,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",121,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",121,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",121,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",121,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",121,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",121,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",121,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",121,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",121,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",121,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",121,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",121,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",121,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",121,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",121,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",13,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",36,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",122,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",122,null],[11,"clone","libc","",0,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",1,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"c_char","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"off_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"time64_t","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TEXT","","",null,null],[17,"O_BINARY","","",null,null],[17,"O_NOINHERIT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null]],"paths":[[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"]]};
searchIndex["hamming"] = {"doc":"A crate to count ones and xor bytes, fast (aka popcount, hamming\nweight and hamming distance).","items":[[5,"weight","hamming","Computes the [Hamming\nweight](https://en.wikipedia.org/wiki/Hamming_weight) of `x`, that\nis, the population count, or number of ones.",null,null],[5,"distance","","Computes the bitwise [Hamming\ndistance](https://en.wikipedia.org/wiki/Hamming_distance) between\n`x` and `y`, that is, the number of bits where `x` and `y` differ,\nor, the number of set bits in the xor of `x` and `y`.",null,null],[5,"distance_fast","","Computes the bitwise [Hamming\ndistance](https://en.wikipedia.org/wiki/Hamming_distance) between\n`x` and `y`, that is, the number of bits where `x` and `y` differ,\nor, the number of set bits in the xor of `x` and `y`.",null,null]],"paths":[]};
searchIndex["newtype_derive"] = {"doc":"This crate provides several macros for deriving implementations of various traits for &quot;newtype&quot; wrappers (*i.e.* tuple structs with a single element).  That is, given a tuple struct with exactly one field (*e.g.* `struct Buckets(i32)`), these macros will derive &quot;obvious&quot; implementations of traits such as `Add`, `Neg`, `Index`, `Deref`, `From`, etc.","items":[[14,"NewtypeAdd!","newtype_derive","",null,null],[14,"NewtypeBitAnd!","","",null,null],[14,"NewtypeBitOr!","","",null,null],[14,"NewtypeBitXor!","","",null,null],[14,"NewtypeDiv!","","",null,null],[14,"NewtypeMul!","","",null,null],[14,"NewtypeRem!","","",null,null],[14,"NewtypeSub!","","",null,null],[14,"NewtypeShl!","","",null,null],[14,"NewtypeShr!","","",null,null],[14,"NewtypeNeg!","","",null,null],[14,"NewtypeNot!","","",null,null],[14,"NewtypeDeref!","","",null,null],[14,"NewtypeDerefMut!","","",null,null],[14,"NewtypeIndex!","","",null,null],[14,"NewtypeIndexMut!","","",null,null],[14,"NewtypeFrom!","","",null,null],[14,"NewtypeBinary!","","",null,null],[14,"NewtypeDebug!","","",null,null],[14,"NewtypeDisplay!","","",null,null],[14,"NewtypeLowerExp!","","",null,null],[14,"NewtypeLowerHex!","","",null,null],[14,"NewtypeOctal!","","",null,null],[14,"NewtypePointer!","","",null,null],[14,"NewtypeUpperExp!","","",null,null],[14,"NewtypeUpperHex!","","",null,null]],"paths":[]};
searchIndex["custom_derive"] = {"doc":"This crate provides a macro that enables the use of custom `derive` attributes.","items":[],"paths":[]};
initSearch(searchIndex);
